{"version":3,"sources":["components/Scoreboard.js","components/Unit.js","components/Board.js","factories/playerFactory.js","factories/shipFactory.js","factories/boardFactory.js","utilities/gameSetup.js","components/Game.js","App.js","index.js"],"names":["Scoreboard","button","turn","placeShips","players","startGame","setStartGame","humanBoard","computerBoard","alertShipSunk","setAlertShipSunk","restartGame","useState","hidePlaceShipButton","setHidePlaceShipButton","turnColor","turnText","buttonText","announcementText","gameOver","useEffect","timer","setTimeout","clearTimeout","mt","colorScheme","onClick","color","maxW","bg","p","my","border","borderColor","borderRadius","align","size","Unit","hasShip","ai","handleUnitClick","index","isHit","disabled","bgColor","w","h","_hover","background","Board","currentEnemy","enemyBoard","setEnemyBoard","enemyName","setHumanBoard","setComputerBoard","setTurn","setPlayers","unitHitBefore","unit","attackCoordinates","playerAi","aiPlay","filterUnit","timeOut","launchAttack","name","playerHuman","unitIndex","receiveAttack","units","myShips","sunk","gameOverCheck","prevState","setBoard","playerBoard","map","grid","blankGrid","justifyContent","py","px","justify","spacing","PlayerFactory","aiOrHuman","shipCount","console","log","generateNumber","Math","floor","random","generateCoordinates","ship","direction","shipLength","data","orientation","length","alert","playerPickShipCoordinates","playerCoordinates","x","y","i","push","addShip","checkIfSunk","hitPoints","hit","setOrientation","whichShip","resetShips","ShipFactory","BoardFactory","type","generateUnits","boardUnits","allUnitCoordinates","allUnitNames","coordinate","createCoordinates","coordinates","createUnitData","filterUnits","matches","forEach","concat","filter","updateShipInfo","filteredUnits","callback","find","filtered","placeShip","selectedUnits","undefined","spaceChecker","every","allShips","selectedUnitArray","selectedUnit","thisShip","addPlayers","typeOfPlayer","gameSetup","start","addHumanPlayer","addComputerPlayer","shipLengths","Game","props","setShipCoordinates","setUpGame","Fragment","player","ships","board","isEmptyCoordinates","newUnits","App","document","title","height","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7438530e.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { Box, Button, Center, Heading, Text } from \"@chakra-ui/react\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\n\nconst Scoreboard = ({\n  turn,\n  placeShips,\n  players,\n  startGame,\n  setStartGame,\n  humanBoard,\n  computerBoard,\n  alertShipSunk,\n  setAlertShipSunk,\n  restartGame,\n}) => {\n  const [hidePlaceShipButton, setHidePlaceShipButton] = useState(false);\n\n  let turnColor = \"\";\n  let turnText = \"\";\n  let buttonText = \"\";\n  let button;\n  let announcementText = \"\";\n  let gameOver = humanBoard.gameOver || computerBoard.gameOver ? true : false;\n\n  useEffect(() => {\n    const timer = setTimeout(() => setAlertShipSunk(false), 3000);\n\n    return () => clearTimeout(timer);\n  }, [alertShipSunk]);\n\n  useEffect(() => {\n    if (gameOver) {\n      setHidePlaceShipButton(false);\n    }\n  }, [gameOver]);\n\n  if (!startGame) {\n    buttonText = \"Start Game\";\n  } else if (startGame && !gameOver) {\n    buttonText = \"Place Ships\";\n  } else if (startGame && gameOver) {\n    buttonText = \"Play Again\";\n  }\n\n  let handleClick = () => {\n    if (!startGame) {\n      setStartGame(true);\n    } else if (gameOver) {\n      restartGame();\n    } else {\n      placeShips(players[\"playerHuman\"]);\n      placeShips(players[\"playerAi\"]);\n      setHidePlaceShipButton(true);\n    }\n  };\n\n  if (turn === \"playerHuman\") {\n    turnColor = \"green\";\n    turnText = \"your\";\n  } else if (turn === \"playerAi\") {\n    turnColor = \"gray\";\n    turnText = \"the computer's\";\n  }\n\n  if (!hidePlaceShipButton) {\n    button = (\n      <Button mt={4} colorScheme=\"teal\" onClick={handleClick}>\n        {buttonText}\n      </Button>\n    );\n  } else {\n    button = <span></span>;\n  }\n\n  if (alertShipSunk) {\n    announcementText = <Text color=\"red\">SHIP SUNK!</Text>;\n  } else if (humanBoard.gameOver) {\n    announcementText = <Text color={turnColor}>Computer Wins!</Text>;\n  } else if (computerBoard.gameOver) {\n    announcementText = <Text color={turnColor}>You win!</Text>;\n  } else if (turn === null) {\n    announcementText = (\n      <Text color=\"gray.600\">Place your ships to get started.</Text>\n    );\n  } else {\n    announcementText = <Text color={turnColor}>Its {turnText} turn.</Text>;\n  }\n\n  return (\n    <Center>\n      <Box\n        maxW=\"350px\"\n        bg=\"white\"\n        p=\"5\"\n        my=\"30\"\n        border=\"1px solid\"\n        borderColor=\"gray.500\"\n        borderRadius=\"3px\"\n        align=\"center\"\n      >\n        <Heading size=\"s\">Welcome to the game! Let's play.</Heading>\n        {announcementText}\n        {button}\n      </Box>\n    </Center>\n  );\n};\n\nexport default Scoreboard;\n","import { Center, WrapItem } from \"@chakra-ui/react\";\nimport React from \"react\";\n\nconst Unit = ({ hasShip, ai, handleUnitClick, index, isHit, disabled }) => {\n  let shipColor = ai ? \"white\" : \"blue\";\n  let bgColor = hasShip ? shipColor : \"white\";\n\n  //When hit\n  if (hasShip && isHit) {\n    bgColor = \"red\";\n  } else if (!hasShip && isHit) {\n    bgColor = \"teal.100\";\n    disabled = true;\n  }\n\n  let handleClick = () => {\n    handleUnitClick(index);\n  };\n\n  return (\n    <WrapItem>\n      <Center\n        w=\"50px\"\n        h=\"50px\"\n        bg={bgColor}\n        border=\"1px\"\n        borderColor=\"gray.500\"\n        borderRadius=\"5px\"\n        _hover={disabled ? null : { background: \"gray.300\" }}\n        onClick={disabled ? null : handleClick}\n      >\n        {index}\n      </Center>\n    </WrapItem>\n  );\n};\n\nexport default Unit;\n","import React from \"react\";\n\nimport { Box, HStack, Wrap } from \"@chakra-ui/react\";\n\nimport Unit from \"./Unit\";\nimport { useEffect } from \"react\";\n\nconst Board = ({\n  startGame,\n  humanBoard,\n  setHumanBoard,\n  computerBoard,\n  setComputerBoard,\n  turn,\n  setTurn,\n  players,\n  setPlayers,\n  setAlertShipSunk,\n}) => {\n  useEffect(() => {\n    if (turn === \"playerAi\") {\n      let unitHitBefore = false;\n      let unit = \"\";\n      while (!unitHitBefore) {\n        unitHitBefore = true;\n        let attackCoordinates = players.playerAi.aiPlay();\n        unit = enemyBoard.filterUnit(attackCoordinates)[0];\n        if (unit.isHit) {\n          unitHitBefore = false;\n        }\n      }\n\n      //Timer to simulate computer thinking\n      const timeOut = setTimeout(() => {\n        launchAttack(unit.name);\n        setTurn(\"playerHuman\");\n      }, 10);\n\n      return () => clearTimeout(timeOut);\n    }\n  }, [turn]);\n\n  if (!startGame) {\n    return null;\n  }\n\n  let currentEnemy; //Enemy Object\n  let enemyBoard; //Enemy Board\n  let setEnemyBoard; //useState to setBoard\n  let enemyName; //String\n  let disabled = true;\n\n  if (turn === \"playerHuman\") {\n    currentEnemy = players.playerAi;\n    enemyName = \"playerAi\";\n    enemyBoard = computerBoard;\n    setEnemyBoard = setComputerBoard;\n    disabled = false;\n  } else if (turn === \"playerAi\") {\n    currentEnemy = players.playerHuman;\n    enemyName = \"playerHuman\";\n    enemyBoard = humanBoard;\n    setEnemyBoard = setHumanBoard;\n    disabled = true;\n  }\n\n  const launchAttack = function shipsBeginAttacking(unitIndex) {\n    let attackedShip = enemyBoard.receiveAttack(\n      enemyBoard.units[unitIndex][\"coordinates\"],\n      currentEnemy.myShips\n    );\n\n    if (attackedShip.sunk) {\n      setAlertShipSunk(true);\n    }\n\n    let gameOver = enemyBoard.gameOverCheck(currentEnemy.myShips);\n    if (gameOver) {\n      setTurn(null);\n    }\n\n    setEnemyBoard((prevState) => ({\n      ...prevState,\n      units: enemyBoard.units,\n      gameOver: gameOver,\n    }));\n\n    setPlayers((prevState) => ({\n      ...prevState,\n      [enemyName]: currentEnemy,\n    }));\n  };\n\n  const handleUnitClick = function unitHasBeenClicked(unitIndex) {\n    setTurn(\"playerAi\");\n    launchAttack(unitIndex);\n  };\n\n  const setBoard = (playerBoard) => {\n    let gridUnits = playerBoard.units;\n\n    return gridUnits.map((unit, index) => {\n      return (\n        <Unit\n          key={index}\n          index={index}\n          hasShip={unit.hasShip}\n          ai={playerBoard.ai}\n          disabled={disabled}\n          handleUnitClick={disabled ? null : handleUnitClick}\n          isHit={unit.isHit}\n        />\n      );\n    });\n  };\n\n  let grid = setBoard(humanBoard);\n  let blankGrid = setBoard(computerBoard);\n\n  //Ai Play\n\n  // if (turn === \"playerAi\") {\n  //   // let unitHitBefore = false;\n  //   // let unit = \"\";\n  //   // while (!unitHitBefore) {\n  //   //   unitHitBefore = true;\n  //   //   let attackCoordinates = players.playerAi.aiPlay();\n  //   //   unit = enemyBoard.filterUnit(attackCoordinates)[0];\n  //   //   if (unit.isHit) {\n  //   //     unitHitBefore = false;\n  //   //   }\n  //   // }\n  //   setTurn(\"playerHuman\");\n  //   let unit = enemyBoard.filterUnit(players.playerAi.aiPlay())[0];\n  //   setTimeout(launchAttack, 2000, unit.name);\n  // }\n\n  return (\n    <HStack justifyContent=\"center\">\n      <Box w=\"510px\" py=\"5px\" px=\"5px\" borderRadius=\"3px\" bg=\"blue.500\">\n        <Wrap justify=\"center\" spacing=\"0\">\n          {grid}\n        </Wrap>\n      </Box>\n      <Box w=\"510px\" py=\"5px\" px=\"5px\" borderRadius=\"3px\" bg=\"red.500\">\n        <Wrap justify=\"center\" spacing=\"0\">\n          {blankGrid}\n        </Wrap>\n      </Box>\n    </HStack>\n  );\n};\n\nexport default Board;\n","import { ShipFactory } from \"./shipFactory\";\n\nconst PlayerFactory = (aiOrHuman) => {\n  // const playedCoordinates = [];\n  const myShips = [];\n  let shipCount = 1;\n  let ai;\n\n  // AI Checker when creating player\n  if (aiOrHuman === \"human\") {\n    ai = false;\n  } else if (aiOrHuman === \"computer\") {\n    ai = true;\n  } else {\n    console.log(\"error with ai\");\n  }\n\n  const addShip = function createsAShipWithFactory(length) {\n    const ship = ShipFactory(length);\n    ship.data.whichShip = shipCount;\n    shipCount++;\n    myShips.push(ship);\n  };\n\n  const generateNumber = () => {\n    return Math.floor(Math.random() * 10);\n  };\n\n  const generateLimitedNumber = (shipLength) => {\n    return Math.floor(Math.random() * (10 - shipLength + 1));\n  };\n\n  const generateCoordinates = function generateSingleCoordinatesToPlaceShip(\n    ship,\n    direction\n  ) {\n    // If ship.orientation = direction, do limited random number. Else, do free random number.\n    if (ship.data.orientation === direction) {\n      let coordinate = generateLimitedNumber(ship.data.length);\n      return coordinate;\n    } else if (ship.data.orientation !== direction) {\n      let coordinate = generateNumber();\n      return coordinate;\n    } else {\n      alert(\n        \"error. ship orientation: \" +\n          ship.data.orientation +\n          \"direction: \" +\n          direction\n      );\n    }\n  };\n\n  const playerPickShipCoordinates = function picksCoordinatesForShip(ship) {\n    let playerCoordinates = [];\n\n    let x = generateCoordinates(ship, \"x\");\n    let y = generateCoordinates(ship, \"y\");\n\n    //Generate rest of coordinates, push to playerCoordinates\n    if (ship.data.orientation === \"x\") {\n      for (let i = x; i < ship.data.length + x; i++) {\n        playerCoordinates.push([i, y]);\n      }\n      return playerCoordinates;\n    } else if (ship.data.orientation === \"y\") {\n      for (let i = y; i < ship.data.length + y; i++) {\n        playerCoordinates.push([x, i]);\n      }\n      return playerCoordinates;\n    }\n\n    // NEXT: check if all coordinates available\n    // Loop, while true, continue\n    // Filter units with coordinate to find unit\n    // Check if unit.hasShip is true\n    // Loop i = ship.length\n    // Generate next coordinate based on orientation\n    // Find unit with that coordinate (Filter unit), check if unit.hasShip is true\n    // If unit.hasShip is false, restart whole thing.\n  };\n\n  const aiPlay = function aiActionWhenPlaying() {\n    let x = generateNumber();\n    let y = generateNumber();\n\n    return [x, y];\n    //  - BEGINNER AI\n    //         - Computer selects random spaces\n    //         - Generate 2 random numbers, each between 0 and 9\n    //         - If coordinate has been already hit, try another until not hit (tested in Gameloop)\n    /*\n    \n          - ADVANCED AI\n            - If there is a hit, computer tries adjacent tiles\n            - If there is a second hit, and a \"direction\" is defined, computer continues line on one side.\n            - If no hit on that side, computer tries other side\n\n            //Check if next move\n            //Pick coordinate: random, searching, or vector\n            //Attack position\n            //Check if position is hit\n            //Plan next move\n\n\n        */\n    // - Computer selects random spaces\n    // - Generate 2 random numbers, each between 0 and 9\n    // - If coordinate has been already hit, try another until not hit\n  };\n\n  return { aiPlay, playerPickShipCoordinates, addShip, myShips, ai };\n};\n\nexport default PlayerFactory;\n","const ShipFactory = (length) => {\n  let ship = 0;\n\n  const getShipNumber = () => {\n    ship++;\n    return ship;\n  };\n\n  const resetShips = () => {\n    ship = 0;\n  };\n\n  const hit = function shipTakesAHit() {\n    data.hitPoints--;\n    data.sunk = checkIfSunk();\n  };\n\n  const checkIfSunk = function shipHasNoMoreHitPoints() {\n    if (data.hitPoints === 0) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const setOrientation = function zeroIsHorizontalOneIsVertical() {\n    let orientation = Math.floor(Math.random() < 0.5);\n    if (orientation === 0) {\n      return \"x\";\n    } else if (orientation === 1) {\n      return \"y\";\n    } else {\n      return \"error\";\n    }\n  };\n\n  const data = {\n    hitPoints: length,\n    sunk: false,\n    hit: hit,\n    checkIfSunk: checkIfSunk,\n    length: length,\n    orientation: setOrientation(),\n    whichShip: \"notSet\",\n    resetShips: resetShips,\n    // owner: playerName,\n  };\n\n  // const currentHitPoints = () => hitPoints;\n\n  return { data };\n};\n\nexport { ShipFactory };\n","import PlayerFactory from \"./playerFactory\";\n\nconst BoardFactory = (type) => {\n  //Constructor\n\n  let ai = false;\n  let gameOver = false;\n  let sunkInTurn = false;\n\n  if (type === \"computer\") {\n    ai = true;\n  }\n\n  let units = (function (generateUnits) {\n    let boardUnits = [];\n\n    // Global functions to store data\n    let allUnitCoordinates = [];\n    let allUnitNames = [];\n\n    // Loop Creates coordinates and unique unit names\n    const createCoordinates = function () {\n      for (let y = 0; y < 10; y++) {\n        let coordinate = [];\n        let name = \"\";\n\n        for (let x = 0; x < 10; x++) {\n          coordinate = [x, y];\n\n          name = \"square\" + x + y;\n\n          allUnitCoordinates.push(coordinate);\n          allUnitNames.push(name);\n        }\n      }\n    };\n\n    //Unit properties are created\n    const createUnitData = () => {\n      for (let i = 0; i < 100; i++) {\n        let unit = {\n          name: i,\n          coordinates: allUnitCoordinates[i],\n          isHit: false,\n          hasShip: false,\n          whichShip: false,\n        };\n\n        boardUnits.push(unit);\n      }\n    };\n\n    //Runs  functions\n    createCoordinates();\n    createUnitData();\n\n    return boardUnits;\n  })();\n\n  // Helper functions\n  ////////////////////////////////////////////\n  ////////////////////////////////////////////\n  ////////////////////////////////////////////\n  ////////////////////////////////////////////\n  ////////////////////////////////////////////\n  ////////////////////////////////////////////\n\n  // Filters Input Coordinates, returns array with matches\n  const filterUnits = function filterMultipleUnits(coordinates) {\n    let matches = [];\n\n    // Filters Units\n    coordinates.forEach((coordinate) => {\n      matches = matches.concat(\n        units.filter((unit) => {\n          //Loop through array items\n\n          if (\n            unit.coordinates[0] !== coordinate[0] ||\n            unit.coordinates[1] !== coordinate[1]\n          ) {\n            return false;\n          } else {\n            return true;\n          }\n        })\n      );\n    });\n\n    return matches;\n  };\n\n  // Filters Input Coordinates, returns array with matches\n  const filterUnit = function filterSingleUnit(coordinates) {\n    let matches = [];\n    //This is for when a single coordinate is entered\n    matches = units.filter((unit) => {\n      if (\n        unit.coordinates[0] !== coordinates[0] ||\n        unit.coordinates[1] !== coordinates[1]\n      ) {\n        return false;\n      } else {\n        return true;\n      }\n    });\n    let result = matches;\n    return result;\n  };\n\n  //Checks if space is available (aka does not have a ship). If all hasShip is false, then returns true (true, space is available)\n  const spaceChecker = function checkIfUnitHasShip(units) {\n    return units.every((unit) => {\n      return !unit.hasShip;\n    });\n  };\n\n  const setGameOver = function () {\n    gameOver = true;\n  };\n\n  // Plug in functions\n  ////////////////////////////////////////////\n  ////////////////////////////////////////////\n  ////////////////////////////////////////////\n  ////////////////////////////////////////////\n  ////////////////////////////////////////////\n  ////////////////////////////////////////////\n  const hasShip = function updateHasShip(unit, ship) {\n    unit.hasShip = true;\n    unit.whichShip = ship.data.whichShip;\n  };\n\n  const isHit = function updatedHitPoints(unit, ship) {\n    unit.isHit = true;\n  };\n\n  // Private functions\n  ////////////////////////////////////////////\n  ////////////////////////////////////////////\n  ////////////////////////////////////////////\n  ////////////////////////////////////////////\n  ////////////////////////////////////////////\n  ////////////////////////////////////////////\n\n  const updateShipInfo = function unitNowHasShip(\n    units,\n    filteredUnits,\n    callback,\n    ship\n  ) {\n    let updatedUnits = units.map((unit) => {\n      // Finds unit in unitArray, and updates it\n\n      const foundUnit = filteredUnits.find((filtered) => {\n        return filtered.name === unit.name;\n      });\n\n      if (foundUnit) {\n        callback(unit, ship);\n      }\n\n      return unit;\n    });\n\n    return updatedUnits;\n  };\n\n  // Public functions\n  ////////////////////////////////////////////\n  ////////////////////////////////////////////\n  ////////////////////////////////////////////\n  ////////////////////////////////////////////\n  ////////////////////////////////////////////\n  ////////////////////////////////////////////\n\n  //Player functions\n\n  const addPlayers = function createsPlayers(typeOfPlayer) {\n    if (typeOfPlayer === \"human\") {\n      const playerHuman = PlayerFactory(\"human\");\n      return { playerHuman };\n    } else if (typeOfPlayer === \"computer\") {\n      const playerAi = PlayerFactory(\"computer\");\n      return { playerAi };\n    } else {\n      alert(\"error creating player, no player type specified\");\n    }\n  };\n\n  const placeShip = function placeShipInUnit(coordinates, ship) {\n    //An array of coordinates is entered. Ex [[3,2],[3,3],[3,4]\n\n    // Step 1: Find units with those coordinates\n    let selectedUnits;\n    // Check if coordinates is a single array or group of arrays\n    if (coordinates.length === 2 && coordinates[0][0] === undefined) {\n      selectedUnits = filterUnit(coordinates);\n    } else {\n      selectedUnits = filterUnits(coordinates);\n    }\n\n    //Step 2, If no space available, exit function\n    // if (!spaceChecker(selectedUnits)) {\n    //   return false;\n    // }\n    //Step 3, Update units with new info\n\n    units = updateShipInfo(units, selectedUnits, hasShip, ship);\n\n    return units;\n  };\n\n  const receiveAttack = function spaceGetsHit(coordinates, allShips) {\n    // Step 1: Find units with those coordinates.\n    let selectedUnitArray = filterUnit(coordinates);\n    let selectedUnit = filterUnit(coordinates)[0];\n\n    // Step 2: if no ship on space, mark space as \"space hit, but no ship\"\n    if (!selectedUnit.hasShip) {\n      updateShipInfo(units, selectedUnitArray, isHit, false);\n      return false;\n    } else if (selectedUnit.hasShip) {\n      // Step 3, find ship in ShipList\n      let whichShip = selectedUnit.whichShip;\n      let thisShip = allShips.filter((ship) => {\n        return ship.data.whichShip === whichShip;\n      })[0];\n\n      // Step 4,deduct hitpoints and check if sunk\n      thisShip.data.hit();\n\n      // Step 5, update ship Data\n\n      updateShipInfo(units, selectedUnitArray, isHit, thisShip);\n\n      return thisShip.data;\n    } else {\n      alert(\"error in filtering unit in attack\");\n    }\n\n    // // Takes a hit\n    // thisShip.data.hit();\n\n    // //Next, check is thisShip is sunk\n    // if (thisShip.data.sunk) {\n    //   //ship down\n    // } else {\n    //   //ship not down\n    // }\n  };\n\n  const gameOverCheck = function checkIfAllShipsAreSunk(allShips) {\n    return allShips.every((ship) => {\n      return ship.data.sunk;\n    });\n  };\n\n  // Data generator for board\n\n  return {\n    units,\n    placeShip,\n    filterUnits,\n    filterUnit,\n    spaceChecker,\n    updateShipInfo,\n    receiveAttack,\n    addPlayers,\n    ai,\n    gameOverCheck,\n    gameOver,\n  };\n};\n\nexport default BoardFactory;\n","import BoardFactory from \"../factories/boardFactory\";\n\nconst gameSetup = () => {\n  const start = function createBoardAndPlayers() {\n    const humanBoard = BoardFactory();\n    const computerBoard = BoardFactory(\"computer\");\n\n    const addHumanPlayer = humanBoard.addPlayers(\"human\");\n    const addComputerPlayer = computerBoard.addPlayers(\"computer\");\n    const shipLengths = [5, 4, 3, 2, 1];\n\n    const { playerHuman } = addHumanPlayer;\n    const { playerAi } = addComputerPlayer;\n\n    shipLengths.forEach((length) => playerHuman.addShip(length));\n    shipLengths.forEach((length) => playerAi.addShip(length));\n\n    return { humanBoard, computerBoard, playerHuman, playerAi };\n  };\n\n  return { start };\n};\n\nexport default gameSetup;\n","import React from \"react\";\nimport { useState, useEffect } from \"react\";\n\nimport { Heading } from \"@chakra-ui/react\";\n\nimport Scoreboard from \"./Scoreboard\";\nimport Board from \"./Board\";\n\nimport gameSetup from \"../utilities/gameSetup\";\n\nconst Game = (props) => {\n  const [turn, setTurn] = useState(null);\n  const [humanBoard, setHumanBoard] = useState(\"noHumanBoard\");\n  const [computerBoard, setComputerBoard] = useState(\"noComputerBoard\");\n  const [players, setPlayers] = useState(\"noPlayers\");\n  const [startGame, setStartGame] = useState(false);\n  const [alertShipSunk, setAlertShipSunk] = useState(false);\n  const [shipCoordinates, setShipCoordinates] = useState([]);\n\n  // Initializes Game after first render\n  useEffect(() => {\n    let setUpGame = gameSetup().start();\n    const { playerHuman, playerAi, humanBoard, computerBoard } = setUpGame;\n\n    setPlayers({ playerHuman, playerAi });\n    setHumanBoard(humanBoard);\n    setComputerBoard(computerBoard);\n  }, [startGame]);\n\n  const restartGame = () => {\n    setPlayers(\"no players\");\n    setComputerBoard(\"noComputerBoard\");\n    setHumanBoard(\"noHumanBoard\");\n    setStartGame(false);\n    setTurn(null);\n  };\n\n  const placeShips = function placePlayerShipsOnBoard(player) {\n    const ships = player.myShips;\n    let board = humanBoard;\n    let playerAi = player.ai;\n\n    setTurn(\"playerHuman\");\n\n    if (player.ai) {\n      board = computerBoard;\n    }\n    ships.forEach((ship) => {\n      let isEmptyCoordinates = false;\n      let coordinates = [];\n\n      while (!isEmptyCoordinates) {\n        isEmptyCoordinates = true;\n        coordinates = player.playerPickShipCoordinates(ship);\n\n        coordinates.forEach((coordinate) => {\n          let currentUnit = board.filterUnit(coordinate)[0];\n          if (currentUnit.hasShip) {\n            isEmptyCoordinates = false;\n          }\n        });\n      }\n\n      let newUnits = board.placeShip(coordinates, ship);\n\n      //Optional\n      setShipCoordinates((prevState) => [...prevState, coordinates]);\n\n      if (!player.ai) {\n        setHumanBoard((prevState) => ({\n          ...prevState,\n          units: newUnits,\n        }));\n      } else if (player.ai) {\n        setComputerBoard((prevState) => ({\n          ...prevState,\n          units: newUnits,\n        }));\n      } else {\n        alert(\"error with updating units\");\n      }\n    });\n  };\n\n  return (\n    <React.Fragment>\n      <Heading align=\"center\">Welcome to Battleship</Heading>\n      <Scoreboard\n        players={players}\n        placeShips={placeShips}\n        startGame={startGame}\n        setStartGame={setStartGame}\n        turn={turn}\n        humanBoard={humanBoard}\n        computerBoard={computerBoard}\n        alertShipSunk={alertShipSunk}\n        setAlertShipSunk={setAlertShipSunk}\n        restartGame={restartGame}\n      />\n      <Board\n        startGame={startGame}\n        humanBoard={humanBoard}\n        computerBoard={computerBoard}\n        turn={turn}\n        setTurn={setTurn}\n        players={players}\n        setPlayers={setPlayers}\n        setHumanBoard={setHumanBoard}\n        setComputerBoard={setComputerBoard}\n        setAlertShipSunk={setAlertShipSunk}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default Game;\n","import Game from \"./components/Game\";\n\nimport { useEffect } from \"react\";\nimport { ChakraProvider, Container } from \"@chakra-ui/react\";\n\nfunction App() {\n  // Sets the title\n  useEffect(() => {\n    document.title = \"🛳 Battleship\";\n  }, []);\n\n  return (\n    <ChakraProvider>\n      <Container maxW=\"100%\" height=\"100vh\" py=\"5\" bg=\"gray.100\">\n        <Game />\n      </Container>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}